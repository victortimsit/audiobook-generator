{"version":3,"file":"svg-injector.cjs.development.js","sources":["../src/cache.ts","../src/clone-svg.ts","../src/is-local.ts","../src/make-ajax-request.ts","../src/request-queue.ts","../src/load-svg-cached.ts","../src/load-svg-uncached.ts","../src/unique-id.ts","../src/inject-element.ts","../src/svg-injector.ts"],"sourcesContent":["const cache = new Map<string, SVGSVGElement | Error | undefined>()\n\nexport default cache\n","const cloneSvg = (sourceSvg: SVGSVGElement) =>\n  sourceSvg.cloneNode(true) as SVGSVGElement\n\nexport default cloneSvg\n","const isLocal = () => window.location.protocol === 'file:'\n\nexport default isLocal\n","import { parse as parseContentType } from 'content-type'\nimport isLocal from './is-local'\n\nconst makeAjaxRequest = (\n  url: string,\n  httpRequestWithCredentials: boolean,\n  callback: (error: Error | null, httpRequest: XMLHttpRequest) => void\n) => {\n  const httpRequest = new XMLHttpRequest()\n\n  httpRequest.onreadystatechange = () => {\n    try {\n      if (!/\\.svg/i.test(url) && httpRequest.readyState === 2) {\n        const contentType = httpRequest.getResponseHeader('Content-Type')\n        if (!contentType) {\n          throw new Error('Content type not found')\n        }\n\n        const { type } = parseContentType(contentType)\n        if (!(type === 'image/svg+xml' || type === 'text/plain')) {\n          throw new Error(`Invalid content type: ${type}`)\n        }\n      }\n\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(\n            isLocal()\n              ? 'Note: SVG injection ajax calls do not work locally without ' +\n                'adjusting security settings in your browser. Or consider ' +\n                'using a local webserver.'\n              : 'Unable to load SVG file: ' + url\n          )\n        }\n\n        if (\n          httpRequest.status === 200 ||\n          (isLocal() && httpRequest.status === 0)\n        ) {\n          callback(null, httpRequest)\n        } else {\n          throw new Error(\n            'There was a problem injecting the SVG: ' +\n              httpRequest.status +\n              ' ' +\n              httpRequest.statusText\n          )\n        }\n      }\n    } catch (error) {\n      httpRequest.abort()\n      if (error instanceof Error) {\n        callback(error, httpRequest)\n      } else {\n        throw error\n      }\n    }\n  }\n\n  httpRequest.open('GET', url)\n\n  httpRequest.withCredentials = httpRequestWithCredentials\n\n  /* istanbul ignore else */\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml')\n  }\n\n  httpRequest.send()\n}\n\nexport default makeAjaxRequest\n","import cache from './cache'\nimport cloneSvg from './clone-svg'\nimport { Errback } from './types'\n\nlet requestQueue: { [key: string]: Errback[] } = {}\n\nexport const clear = () => {\n  requestQueue = {}\n}\n\nexport const queueRequest = (url: string, callback: Errback) => {\n  requestQueue[url] = requestQueue[url] || []\n  requestQueue[url].push(callback)\n}\n\nexport const processRequestQueue = (url: string) => {\n  for (let i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer.\n    setTimeout(() => {\n      /* istanbul ignore else */\n      if (Array.isArray(requestQueue[url])) {\n        const cacheValue = cache.get(url)\n        const callback = requestQueue[url][i]\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof SVGSVGElement) {\n          callback(null, cloneSvg(cacheValue))\n        }\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof Error) {\n          callback(cacheValue)\n        }\n\n        /* istanbul ignore else */\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url]\n        }\n      }\n    }, 0)\n  }\n}\n","import cache from './cache'\nimport cloneSvg from './clone-svg'\nimport makeAjaxRequest from './make-ajax-request'\nimport { processRequestQueue, queueRequest } from './request-queue'\nimport { Errback } from './types'\n\nconst loadSvgCached = (\n  url: string,\n  httpRequestWithCredentials: boolean,\n  callback: Errback\n) => {\n  if (cache.has(url)) {\n    const cacheValue = cache.get(url)\n\n    if (cacheValue === undefined) {\n      queueRequest(url, callback)\n      return\n    }\n\n    /* istanbul ignore else */\n    if (cacheValue instanceof SVGSVGElement) {\n      callback(null, cloneSvg(cacheValue))\n      return\n    }\n\n    // Errors are always refetched.\n  }\n\n  // Seed the cache to indicate we are loading this URL.\n  cache.set(url, undefined)\n  queueRequest(url, callback)\n\n  makeAjaxRequest(url, httpRequestWithCredentials, (error, httpRequest) => {\n    /* istanbul ignore else */\n    if (error) {\n      cache.set(url, error)\n    } else if (\n      httpRequest.responseXML instanceof Document &&\n      httpRequest.responseXML.documentElement &&\n      httpRequest.responseXML.documentElement instanceof SVGSVGElement\n    ) {\n      cache.set(url, httpRequest.responseXML.documentElement)\n    }\n    processRequestQueue(url)\n  })\n}\n\nexport default loadSvgCached\n","import makeAjaxRequest from './make-ajax-request'\nimport { Errback } from './types'\n\nconst loadSvgUncached = (\n  url: string,\n  httpRequestWithCredentials: boolean,\n  callback: Errback\n) => {\n  makeAjaxRequest(url, httpRequestWithCredentials, (error, httpRequest) => {\n    /* istanbul ignore else */\n    if (error) {\n      callback(error)\n    } else if (\n      httpRequest.responseXML instanceof Document &&\n      httpRequest.responseXML.documentElement &&\n      httpRequest.responseXML.documentElement instanceof SVGSVGElement\n    ) {\n      callback(null, httpRequest.responseXML.documentElement)\n    }\n  })\n}\n\nexport default loadSvgUncached\n","let idCounter = 0\nconst uniqueId = () => ++idCounter\nexport default uniqueId\n","import loadSvgCached from './load-svg-cached'\nimport loadSvgUncached from './load-svg-uncached'\nimport { BeforeEach, Errback, EvalScripts } from './types'\nimport uniqueId from './unique-id'\n\ntype ElementType = Element | HTMLElement | null\n\nconst injectedElements: ElementType[] = []\nconst ranScripts: { [key: string]: boolean } = {}\nconst svgNamespace = 'http://www.w3.org/2000/svg'\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink'\n\nconst injectElement = (\n  el: NonNullable<ElementType>,\n  evalScripts: EvalScripts,\n  renumerateIRIElements: boolean,\n  cacheRequests: boolean,\n  httpRequestWithCredentials: boolean,\n  beforeEach: BeforeEach,\n  callback: Errback\n) => {\n  const elUrl = el.getAttribute('data-src') || el.getAttribute('src')\n\n  /* istanbul ignore else */\n  if (!elUrl) {\n    callback(new Error('Invalid data-src or src attribute'))\n    return\n  }\n\n  // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail, so\n  // no need for IE8 indexOf() polyfill.\n  /* istanbul ignore else */\n  if (injectedElements.indexOf(el) !== -1) {\n    // TODO: Extract.\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n    return\n  }\n\n  // Remember the request to inject this element, in case other injection calls\n  // are also trying to replace this element before we finish.\n  injectedElements.push(el)\n\n  // Try to avoid loading the orginal image src if possible.\n  el.setAttribute('src', '')\n\n  const loadSvg = cacheRequests ? loadSvgCached : loadSvgUncached\n\n  loadSvg(elUrl, httpRequestWithCredentials, (error, svg) => {\n    /* istanbul ignore else */\n    if (!svg) {\n      // TODO: Extract.\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(error)\n      return\n    }\n\n    const elId = el.getAttribute('id')\n    /* istanbul ignore else */\n    if (elId) {\n      svg.setAttribute('id', elId)\n    }\n\n    const elTitle = el.getAttribute('title')\n    /* istanbul ignore else */\n    if (elTitle) {\n      svg.setAttribute('title', elTitle)\n    }\n\n    const elWidth = el.getAttribute('width')\n    /* istanbul ignore else */\n    if (elWidth) {\n      svg.setAttribute('width', elWidth)\n    }\n\n    const elHeight = el.getAttribute('height')\n    /* istanbul ignore else */\n    if (elHeight) {\n      svg.setAttribute('height', elHeight)\n    }\n\n    const mergedClasses = Array.from(\n      new Set([\n        ...(svg.getAttribute('class') || '').split(' '),\n        'injected-svg',\n        ...(el.getAttribute('class') || '').split(' '),\n      ])\n    )\n      .join(' ')\n      .trim()\n    svg.setAttribute('class', mergedClasses)\n\n    const elStyle = el.getAttribute('style')\n    /* istanbul ignore else */\n    if (elStyle) {\n      svg.setAttribute('style', elStyle)\n    }\n\n    svg.setAttribute('data-src', elUrl)\n\n    // Copy all the data elements to the svg.\n    const elData = [].filter.call(el.attributes, (at: Attr) => {\n      return /^data-\\w[\\w-]*$/.test(at.name)\n    })\n\n    Array.prototype.forEach.call(elData, (dataAttr: Attr) => {\n      /* istanbul ignore else */\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their clip-path\n      // references are unique.\n      //\n      // This addresses the issue of having multiple instances of the same SVG\n      // on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths contained\n      // in parent elements that are hidden, so if you hide the first SVG\n      // instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by\n      // w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI. Mapping IRI\n      // addressable elements to the properties that can reference them.\n      const iriElementsAndProperties: { [key: string]: string[] } = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke'],\n      }\n\n      let element\n      let elements\n      let properties\n      let currentId: string\n      let newId: string\n\n      Object.keys(iriElementsAndProperties).forEach((key) => {\n        element = key\n        properties = iriElementsAndProperties[key]\n\n        elements = svg.querySelectorAll(element + '[id]')\n        for (let a = 0, elementsLen = elements.length; a < elementsLen; a++) {\n          currentId = elements[a].id\n          newId = currentId + '-' + uniqueId()\n\n          // All of the properties that can reference this element type.\n          let referencingElements\n          Array.prototype.forEach.call(properties, (property: string) => {\n            // :NOTE: using a substring match attr selector here to deal with IE\n            // \"adding extra quotes in url() attrs\".\n            referencingElements = svg.querySelectorAll(\n              '[' + property + '*=\"' + currentId + '\"]'\n            )\n            for (\n              let b = 0, referencingElementLen = referencingElements.length;\n              b < referencingElementLen;\n              b++\n            ) {\n              const attrValue: string | null =\n                referencingElements[b].getAttribute(property)\n              if (\n                attrValue &&\n                !attrValue.match(new RegExp('url\\\\(\"?#' + currentId + '\"?\\\\)'))\n              ) {\n                continue\n              }\n              referencingElements[b].setAttribute(\n                property,\n                'url(#' + newId + ')'\n              )\n            }\n          })\n\n          const allLinks = svg.querySelectorAll('[*|href]')\n          const links = []\n          for (let c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            const href = allLinks[c].getAttributeNS(xlinkNamespace, 'href')\n            /* istanbul ignore else */\n            if (href && href.toString() === '#' + elements[a].id) {\n              links.push(allLinks[c])\n            }\n          }\n          for (let d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId)\n          }\n\n          elements[a].id = newId\n        }\n      })\n    }\n\n    // Remove any unwanted/invalid namespaces that might have been added by SVG\n    // editing tools.\n    svg.removeAttribute('xmlns:a')\n\n    // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested.\n\n    // Find then prune the scripts.\n    const scripts = svg.querySelectorAll('script')\n    const scriptsToEval: string[] = []\n    let script\n    let scriptType\n\n    for (let i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type')\n\n      // Only process javascript types. SVG defaults to 'application/ecmascript'\n      // for unset types.\n      /* istanbul ignore else */\n      if (\n        !scriptType ||\n        scriptType === 'application/ecmascript' ||\n        scriptType === 'application/javascript' ||\n        scriptType === 'text/javascript'\n      ) {\n        // innerText for IE, textContent for other browsers.\n        script = scripts[i].innerText || scripts[i].textContent\n\n        // Stash.\n        /* istanbul ignore else */\n        if (script) {\n          scriptsToEval.push(script)\n        }\n\n        // Tidy up and remove the script element since we don't need it anymore.\n        svg.removeChild(scripts[i])\n      }\n    }\n\n    // Run/Eval the scripts if needed.\n    /* istanbul ignore else */\n    if (\n      scriptsToEval.length > 0 &&\n      (evalScripts === 'always' ||\n        (evalScripts === 'once' && !ranScripts[elUrl]))\n    ) {\n      for (\n        let l = 0, scriptsToEvalLen = scriptsToEval.length;\n        l < scriptsToEvalLen;\n        l++\n      ) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a\n        // caller defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'.\n        new Function(scriptsToEval[l])(window)\n      }\n\n      // Remember we already ran scripts for this svg.\n      ranScripts[elUrl] = true\n    }\n\n    // :WORKAROUND: IE doesn't evaluate <style> tags in SVGs that are\n    // dynamically added to the page. This trick will trigger IE to read and use\n    // any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23.\n    const styleTags = svg.querySelectorAll('style')\n    Array.prototype.forEach.call(styleTags, (styleTag: HTMLStyleElement) => {\n      styleTag.textContent += ''\n    })\n\n    svg.setAttribute('xmlns', svgNamespace)\n    svg.setAttribute('xmlns:xlink', xlinkNamespace)\n\n    beforeEach(svg)\n\n    if (!el.parentNode) {\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(new Error('Parent node is null'))\n      return\n    }\n\n    // Replace the image with the svg.\n    el.parentNode.replaceChild(svg, el)\n\n    // Now that we no longer need it, drop references to the original element so\n    // it can be GC'd.\n    // TODO: Extract\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n\n    callback(null, svg)\n  })\n}\n\nexport default injectElement\n","import injectElement from './inject-element'\nimport { AfterAll, BeforeEach, Errback, EvalScripts } from './types'\n\ntype Elements = HTMLCollectionOf<Element> | NodeListOf<Element> | Element | null\n\ninterface OptionalArgs {\n  afterAll?: AfterAll\n  afterEach?: Errback\n  beforeEach?: BeforeEach\n  cacheRequests?: boolean\n  evalScripts?: EvalScripts\n  httpRequestWithCredentials?: boolean\n  renumerateIRIElements?: boolean\n}\n\nconst SVGInjector = (\n  elements: Elements,\n  {\n    afterAll = () => undefined,\n    afterEach = () => undefined,\n    beforeEach = () => undefined,\n    cacheRequests = true,\n    evalScripts = 'never',\n    httpRequestWithCredentials = false,\n    renumerateIRIElements = true,\n  }: OptionalArgs = {}\n) => {\n  if (elements && 'length' in elements) {\n    let elementsLoaded = 0\n    for (let i = 0, j = elements.length; i < j; i++) {\n      injectElement(\n        elements[i],\n        evalScripts,\n        renumerateIRIElements,\n        cacheRequests,\n        httpRequestWithCredentials,\n        beforeEach,\n        (error, svg) => {\n          afterEach(error, svg)\n          if (\n            elements &&\n            'length' in elements &&\n            elements.length === ++elementsLoaded\n          ) {\n            afterAll(elementsLoaded)\n          }\n        }\n      )\n    }\n  } else if (elements) {\n    injectElement(\n      elements,\n      evalScripts,\n      renumerateIRIElements,\n      cacheRequests,\n      httpRequestWithCredentials,\n      beforeEach,\n      (error, svg) => {\n        afterEach(error, svg)\n        afterAll(1)\n        elements = null\n      }\n    )\n  } else {\n    afterAll(0)\n  }\n}\n\nexport default SVGInjector\n"],"names":["cache","Map","cloneSvg","sourceSvg","cloneNode","isLocal","location","protocol","makeAjaxRequest","callback","httpRequest","onreadystatechange","test","url","readyState","contentType","Error","parseContentType","type","status","responseXML","statusText","error","abort","requestQueue","queueRequest","push","len","setTimeout","cacheValue","get","i","SVGSVGElement","length","httpRequestWithCredentials","has","undefined","set","loadSvgUncached","Document","idCounter","uniqueId","injectedElements","ranScripts","svgNamespace","xlinkNamespace","el","renumerateIRIElements","beforeEach","elUrl","getAttribute","indexOf","splice","cacheRequests","loadSvgCached","loadSvg","svg","elId","setAttribute","elTitle","elWidth","elHeight","mergedClasses","Array","from","split","join","trim","elStyle","elData","filter","call","attributes","at","name","prototype","forEach","dataAttr","value","iriElementsAndProperties_1","clipPath","linearGradient","marker","pattern","element_1","elements_1","properties_1","currentId_1","newId_1","Object","keys","key","querySelectorAll","a","elementsLen","id","property","referencingElements","SVGInjector","elements","_a","_b","_c","afterAll","_d","_e","_f","_g","evalScripts","_h","_j"],"mappings":"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"}